不要做浮点运算
0.1+0.2

0.30000000000000004


\unnnn Unicode长度为1
var str='\u03a3'; str.length

1


字符串创建后长度不在改变，只能新的字符串被覆盖，影响效率

逻辑与在有一个非布尔值下：（与||相反）
'a'&&123

123

'a'&&false

false
false&&123

false
用途：只有在complete存在才执行;
controllerObj.complete&&controllerObj.complete($target, {result:'thesame'});

'a'||123
"a"


字符串比较大小是按ascii码比较的（比较首位谁大就谁，同样大舅比较下一位。。）
'a'>'B'
true

'a'>'b'
false
'aaaaaaaaaaaa'>'b'
false
'ba'>'b'
true

'b'>'b'
false

for in 遍历对象、数组等
for(var pro in window){console.log(pro)}
for(var pro in [1,2,3,4]){console.log(pro)}

var obj={a:function(){alert(1234)},b:1}
for(var pro in obj){console.log(pro)}
可以用来反射之类的
var obj={a:function(){alert(1234)},b:1}
for(var pro in obj){console.log(obj[pro])}

lebel语句跳出多重循环（不建议使用）

基本类型（Undefined Null Bollean Number String）(具有固定大小内存，因此保存在栈内存中)
引用类型（obj）(引用类型的值是对象，保存在堆内存中。包含引用类型的值的变量实际是一个指向该对象的指针)
引用类型 复制变量值实际是同一个指针，最终指向同一个对象
而传递参数是值传递

var person=new Object;
person.name='b';
function set(obj){
obj.name='aaaa';
}
set(person);
console.log(person.name);//aaaa


var person=new Object;
person.name='b';
function set(obj){
obj.name='aaaa';
obj=new Object;//当函数在内部重写这个obj时候，这个变量引用的局部对象了
obj.name=123;
}
set(person);
console.log(person.name);//仍然是aaaa

typeof 用于检测基本类型
'11' instanceof RegExp
false 用于判断变量是否引用类型的实例

没有块级作用域
if(1>0){
var a=1;
}
console.log(a);//1

for(var i=0;i<=10;i++){

}
console.log(i);//11

用[]访问对象属性 和.访问一样。便利之处就在于他可以通过字符串去访问，特别是有空格的属性名，根本不能用.访问
var obj={a:1}
var str='a';
console.log(obj[str]);//1

var begin=(new Date()).valueOf();
var a='1';
for(var i=0;i<10000000;i++){
	if(a==='0'){
}else if(a==='1'){
}
}
var end=(new Date()).valueOf();
console.log(end-begin)//18063



var begin=(new Date()).valueOf();
var a='1';
for(var i=0;i<10000000;i++){
	switch(a){

	case '0':
	break;

	case '1':
	break;}
}
var end=(new Date()).valueOf();
console.log(end-begin)//13775、13910
总结：switch比if更高效

数组：
sort 默认按字符串排序的，尽管里面全是整形的数据,可以自定义规则（可以任何类型，如obj的）
	 function compare(a,b){
		return b-a;
	 }
	 var arr=[1,22,3,55,32];
	 arr.sort(compare);
	 console.log(arr);//[55, 32, 22, 3, 1]

concat在数组末尾添加新的数组
	 var arr=[1,2,55];
	 var arr2=arr.concat([1,23]);
	 console.log(arr2);//[1, 2, 55, 1, 23]

slice 返回切割数组的后面数据为新的数组
	var arr=[55, 32, 22, 3, 1].slice(3);
	console.log(arr);//[3, 1]
	
splice 删除数组任意项的任意个数、插入任意位置任意项数、替换任意位置任意项数

indexOf()从开头找第一个匹配的位置/lastIndexOf 从末尾开始找【按===的方式查找的！】
var person={name:"bajian"};
var people=[{name:"bajian"}];
var people2=[person];
console.log(people.indexOf(person));//-1 【按===的方式查找的！】
console.log(people2.indexOf(person));//0

迭代
every:对数组每项运行给定的函数。如果没项都返回true则返回true
	var arr=[3,2,5];
	var re=arr.every(function(item,index,array){
		console.log(index+' '+item+' '+array);
		if(item>1) return true;
	});
	console.log(re);
	0 3 3,2,5
	1 2 3,2,5
	2 5 3,2,5
	true
	
some:对数组每项运行给定的函数。如果至少有一项返回true则返回true	

filter：返回符合项组成的数组
	var arr=[3,2,5];
	var re=arr.filter(function(item,index,array){
	return item>2;
	});
	console.log(re);//[3, 5]

map:返回运行结果的数组
	var arr=[3,2,5];
	var re=arr.map(function(item,index,array){
	return item*2;
	});
	console.log(re);//[6, 4, 10]
	
forEach:就是遍历数组。。无返回值
var arr=[3,2,5];
	var re=arr.forEach(function(item,index,array){
	//
	});
	
new Date(2016,2,8,15,16,12)//2016.03.08 15:16:12（注意月份-1的）
Tue Mar 08 2016 15:16:12 GMT+0800 (中国标准时间)

Date.now()//获取当前时间戳13位，比(new Date).valueOf()简单

console.log(new Date(2007,1,1)>new Date(2007,2,3))//false日期可以直接比较大小

正则：
var exp=/PATTERN/FLAG;
flag有三种：g:匹配全局（global）、i:不区分大小写（case-insensitive）、m:多行模式
/[a]/g.test("plain");//true
var matches=/[a]/g.exec("plain");

//错误的实现方法（无法动态设置正则表达式）
function getStringMiddle(str,left,right) {
		var $=left+"([\d\D]*?)"+right;
		var pattern=/{$}/g
		var matches=pattern.exec(str);
		return matches;
	}

//正确的实现方法
	/**
	 * 取文本中间
	 * @param str 原文本
	 * @param left 左边文本
	 * @param right 右边文本
	 * @param 是否返回匹配文本包含左右边（可省略）
	 * @return string 返回匹配文本
	 */
function getStringMiddle(str,left,right,returnWhole) {
		var $=left+"([\\d\\D]*?)"+right;
		var pattern=new RegExp($,'g');
		var matches=pattern.exec(str);
		if(!matches) return '';
		if(returnWhole) return matches[0];
		return matches[1];
	}
	
m=getStringMiddle('ashiahsfkjasf','shi','ja',1);//shiahsfkja
m=getStringMiddle('ashiahsfkjasf','shi','ja');//ahsfk

var str='{"code":"S000000","msg":"操作成功","data":[{"pic":0,"audio":0,"ts":"2016-03-08 14:30:07"},{"pic":0,"audio":0,"ts":"2016-03-08 14:30:07"}],"extra":""}';
str=str.replace(/\d+-\d+-(\d\d) \d\d:\d\d:\d\d/g, "$1号");
console.log(str);//{"code":"S000000","msg":"操作成功","data":[{"pic":0,"audio":0,"ts":"08号"},{"pic":0,"audio":0,"ts":"08号"}],"extra":""}

var str='cat rat fat';
str=str.replace(/(at)/g, "aa$1 hi");
console.log(str);//caaat hi raaat hi faaat hi

var str='cat rat fat';
str=str.replace(/(.at)/g, "aa$1 hi");
console.log(str);
aacat hi aarat hi aafat hi
第二个参数还可以是function,实现更定制化的替换操作


每个函数实际是对象，是Function的实例
function t(){} t instanceof Function;//true

function sum(a,b){return a+b;}
var anotherSum=sum;
console.log(anotherSum(1,5));//6
sum=null;
console.log(anotherSum(1,5));//6

函数声明：
function sum(a,b){return a+b;}
函数表达式：
var sum=function(){}
	两者几乎没什么区别，唯一区别：
	//不报错：
	sum(1,5);
	function sum(a,b){return a+b;}
	//报错：
	sum(1,5);
	var sum=function(a,b){return a+b;}

	arguments.callee指向函数名(实现无须指定函数名的递归)//严苛模式下arguments.callee、arguments.caller报错
	function a(a){
	if(a>1){
	 a--;
	 arguments.callee(a);
	 console.log(a);
	 }
	 }
	//1
	//2
	//3


function sum(a,b){return a+b;}
sum.length//2 返回函数期望接收多少个参数

call、apply：作用相同，区别在传入的参数方式不同而已：用法：扩充函数赖以生存的运行作用域、对象不需要和方法有耦合关系
	window.color='red';
	var o={color:'blue'};
	function sayColor(){
	console.log(this.color);
	}
	sayColor();//red
	sayColor.call(this);//red
	sayColor.call(window);//red
	sayColor.call(o);//blue

bind 绑定：
	window.color='red';
	var o={color:'blue'};
	function sayColor(){
	console.log(this.color);
	}
	var bo=sayColor.bind(o);
	bo();//blue

toFixed：
	var num=10.222;num.toFixed(2)
	"10.22"
	var num=10.225;num.toFixed(2)
	"10.22"
	var num=10.226;num.toFixed(2)
	"10.23"

	
'bajian'.charAt(2)//"j"
'bajian'.charCodeAt(2)//106 ascii码
String.fromCharCode(106)//"j"

Math.ceil()//向上舍入Math.ceil(1.2)//2
Math.floor()//向下
Math.round()//四舍五入

//Object.keys获取函数原型
	function Person(){
	this.value='jimi';
	}
	Person.prototype.name='bajian';
	key=Object.keys(Person.prototype);//["name"]
for(var i in Person){
	console.log(i);//bajian
}

	function Person(){
	this.value='jimi';
	}
	Person.prototype.name='bajian';
	Person.prototype.alert=function(){
		alert(12);
	}
	Person.alert();

var BaseClass = function() {}; // var BaseClass=new Function();  
BaseClass.f1 = function(){//定义静态方法  
     alert(' This is a static method ');  
}
BaseClass.f1();//This is a static method  
var instance1 = new BaseClass();  
instance1.f1();//instance1.f1 is not a function  
由以上代码分析可知，静态方法不能被实例对象调用，而原型可以被实例调用
javascript中静态方法、实例方法、内部方法和原型的一点见解http://blog.csdn.net/jerrysbest/article/details/6642003

var BaseClass = function() {  
this.method1 = function(){  
       alert(' Defined by the "this" in the instance method');  
 }  
};  
var instance1 = new BaseClass();  
instance1.method1 = function(){  
    alert(' Defined directly in the instance method');  
}  
BaseClass.prototype.method1 = function(){  
    alert(' Defined by the prototype instance method ');  
}  
instance1.method1();//Defined directly in the instance method  
    通过运行结果跟踪测试可以看出直接定义在实例上的变量的优先级要高于定义在“this”上的，而定义在“this”上的又高于 prototype定义的变量

下面这个例子类似于面向对象public和private的应用方式
	var BaseClass = function() {  
    var method1 = function() {  
        alert("Internal method");  
    };  
    var method2 = function() {  
        alert("call Internal method");  
        method1();  
    };  
    this.method3 = function(){  
        method2();  
    }  
};  
var instance1 = new BaseClass();  
instance1.method1();// 会报错，因为method1是BaseClass中定义的内部变量，作用域只有在内部可见（闭包）  
instance1.method3();//会先后调用method2和method1  

原型动态性：
	function Person(){
	this.value='jimi';
	}
	Person.prototype.name='bajian';
	var p=new Person();
	Person.prototype.say=function(){
	alert(123);}
	p.say();
实例的指针指向原型，而不是构造函数、尽管可以修改和添加，但重写整个原型就不行了：
	function Person(){
	this.value='jimi';
	}
	var p=new Person();
	Person.prototype={
	say:alert(123);
	}
	p.say();//error

结合使用构造函数模式和原型模式(目前使用最广泛，最认可的自定义类型的模式)
	function Person(name,age,job){
	this.name=name;
	this.age=age;
	this.job=job;
	}
	Person.prototype={
	constructor:Person,//关键
	sayName:function(){
	console.log(this.name);
	}
	}
	var p1=new Person('bajian',18,'php');
	var p2=new Person('jiban',22,'java');
	p1.sayName();//bajian
	p2.sayName();//jiban
	p1.sayName===p2.sayName//true

组合继承：(最常用的继承方式)
	function Person(name,age){
	this.name=name;
	this.age=age;
	this.job="web";
	}
	Person.prototype.sayAge=function(){
	alert(this.age);
	}
	
	function SubPerson(name,age){
	//继承属性
	Person.call(this,name);
	this.age=age;
	
	}
	//继承方法
	SubPerson.prototype=new Person('jimi',11);
	SubPerson.prototype.sayName=function(){
	alert(this.name);
	}
	
	var sp=new SubPerson('bajian',20);
	sp.sayAge();//20
	sp.sayName();//bajian
	sp.job;//"web"

很多开发者常把闭包和匿名函数搞混，闭包指有权访问另一个函数作用域内的变量的函数，常见方式就是在一个函数中创建另一个函数


	var p=(function(){
	
	var Person=function(name,age){
	this.name=name;
	this.age=age;
	this.job="web";
	};
	
	Person.prototype.sayAge=function(){
	alert(this.age);
	}
	
	Person.prototype.sayAgeAndName=function(){
	p.sayAge();
	alert(this.name);
	}  
	return new Person('bajian',15);
	})();
	p.sayAgeAndName()//15,BAJIAN
优化后：

	var p=(function(){
	
	var Person=function(name,age){
	this.name=name;
	this.age=age;
	this.job="web";
	};
	
	function sayAge(age){
	alert(age);
	}
	
	Person.prototype.sayAgeAndName=function(){
	sayAge(this.age);
	alert(this.name);
	}  
	return new Person('bajian',15);
	})();
	p.sayAgeAndName()//15,BAJIAN
	
//变量无块级作用域
	for(var i=1;i<5;i++){
	}
	console.log(i);//5
	var i;//忽略重复定义，但是值会覆盖，比如var i=6;则输出6
	console.log(i);//5
	
//模块模式：为单例模式创建私有变量和特权方法[常用来管理应用程序级别的信息]
	var single=function(){
	var a=1;
	return {
	getA:function(){
	return a;
	}
	};
	}();
	single.getA();
	
事件委托
在DOM树尽可能高的层次添加事件处理（利用冒泡原理）
	<!DOCTYPE html>
	<html>
	<head>
		<title></title>
		<style type="text/css">

		</style>
	</head>
	<body id="body">

		<ul id="ul">
			<li class="cls" id="li1">bajian</li>
			<li id="li2">bajian2</li>
			<li id="li3">bajian3</li>
			<li id="li4">bajian4</li>
			<li id="li5">bajian5</li>

		</ul>
		<script type="text/javascript">
			var ul=document.getElementById('body');
			// var ul=document.getElementById('ul');

			var target=null;
			ul.onclick=function(event){
				console.log(event.target.id);
				target=event.target
				switch (event.target.id) {
					case 'li1':
					console.log('li1 '+target.textContent+target.className)
					break;

					case 'li2':
					console.log('li2 '+target.textContent)
					break;

					default:
					break;
				}
			}
		</script>
	</body>
	</html>

在使用innerHTML之前如果有绑定事件要先移除，否则浏览器可能没有回收这个空事件
	XXX.onclick=null;
	XXX.innerHTML='';


函数添加preventExtensions就不能添加新的成员了，但可以修改和删除
	Object.preventExtensions(person);


函数添加seal()/frozen()就不能添加新的成员了不可以修改和删除
	Object.preventExtensions(person);

